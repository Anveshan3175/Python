
Scopes :

def testScope():
...     def innerScope():
...         value = 'Hi Inner'
...     value = "Hi Outer"
...     innerScope()
...     print("Print outer : ",value)
... 
>>> testScope()
Print outer :  Hi Outer   // why ? -> "value" is assigned "Hi Outer" and local methhod is called. Now local method will create new local-scoped variable "value" and assigns a value. This variable , however disappears once method execution completes. So "value" still holds "Hi Outer" and it is printed.

>>> def testScope():
...     def innerScope():
...         nonlocal value
...         value = 'Hi Inner'
...     value = "Hi Outer"
...     innerScope()
...     print("Print outer : ",value)
... 
>>> testScope()
Print outer :  Hi Inner

The only difference in the output of second program is attributed to "nonlocal" modifier. Because of this modifier, no new variable "value" is created and it points to "value" declared in the outer method.



>>> def testScope():
...     def innerScope():
...         global value
...         value = 'Hi Inner'
...     value = "Hi Outer"
...     innerScope()
...     print("Print outer : ",value)
... 
>>> testScope()
Print outer :  Hi Outer

Here "value" is scoped as global in the inner function.So, the "value" from the outer method is not reassigned in the inner method.However if there is a global "value", then it gets reassigned.

>>> print("Print outer : ",value)
Print outer :  Hi Inner   # Here value is accessed global(module level). "value" is assigned the printed value in inner method.

Now I asign another value for the "value"
>>> value = 'Hi Global'
>>> value
'Hi Global'

So "value" has 'Hi Global'. But this gets change when I call above method again since in the inner method we are modifing the global "value"
>>> testScope()
Print outer :  Hi Outer
>>> value
'Hi Inner'




