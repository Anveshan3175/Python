Why Virtual Env concept came into existence ?
---------------------------------------------
Application A needs =====>  version 1.0 of a particular python module   (these are not standard python libraries)
Application B needs =====>  version 2.0 of a particular python module
  So the requirements are in conflict and installing either version 1.0 or 2.0 will leave one application unable to run
  
What can be done ?
Create a virtual environment (often shortened to “virtualenv”), a self-contained directory tree that contains a Python installation for a particular version of Python, plus a number of additional packages.

So,
Application A can have its own virtual environment with version 1.0 installed 
Application B has another virtualenv with version 2.0 installed

At later point of time, Application B can be upgraded to version 3.0 and it will not impact Application A in any way


Installation
------------
You can install by 
sudo apt install python3-venv

Using pip and this is recommended
> sudo pip3 install virtualenv

> virtualenv testenv                    -- python2
> python3 -m virtualenv env             -- python3
> cd env                                -- Go to that directory
> source bin/activate                   -- Activate the virtual env
> pip freeze                            -- Lists the modules installed in the virtual env
> pip install numpy                     -- Intall Numpy
> import numpy as npy
> a = npy.zeros((2,2)) 
> print(a)
> deactivate                            -- Deactivate the virtual env 
> cd ..                                 -- come out of the directory
> rm -r env                             -- remove the virtual env after deactivating it

++ deactivte the virtual env
(ENV)$ deactivate
$ rm -r /path/to/ENV

